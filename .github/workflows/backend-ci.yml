name: Backend CI

on:
  pull_request:
    branches:
      - Developpement  # Déclencher les tests sur les PR vers Developpement

jobs:
  migrate:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=Ecopétition.settings" >> $GITHUB_ENV

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create database
        run: |
          PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h localhost -U ${{ secrets.DB_USER }} -d postgres -c "CREATE DATABASE ${{ secrets.DB_NAME }};"

      - name: Run migrations
        run: python manage.py migrate

  test:
    runs-on: ubuntu-latest
    needs: migrate  # Exécute les tests seulement après `migrate`
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=Ecopétition.settings" >> $GITHUB_ENV

      - name: Run tests
        run: pytest

  auto-merge-develop:
    needs: test
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.ref != 'master'  # Empêche le merge automatique depuis master
    steps:
      - name: Installer GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Fusionner la PR automatiquement dans Developpement
        run: gh pr merge --merge --repo ${{ github.repository }} ${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  auto-merge-master:
    needs: auto-merge-develop
    runs-on: ubuntu-latest
    steps:
      - name: Installer GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Créer une Pull Request de Developpement vers master
        run: |
          gh pr create --base master --head Developpement --title "Auto-merge Developpement into master" --body "Cette PR fusionne automatiquement Developpement dans master"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Fusionner la PR automatiquement
        run: |
          gh pr merge --merge --repo ${{ github.repository }} --auto
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

