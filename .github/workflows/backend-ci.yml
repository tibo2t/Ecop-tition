name: Backend CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  migrate:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=Ecopétition.settings" >> $GITHUB_ENV

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create database
        run: |
          PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h localhost -U ${{ secrets.DB_USER }} -d postgres -c "CREATE DATABASE ${{ secrets.DB_NAME }};"

      - name: Run migrations
        run: python manage.py migrate

  test:
    runs-on: ubuntu-latest
    needs: migrate  # Exécute les tests seulement après `migrate`
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=Ecopétition.settings" >> $GITHUB_ENV

      - name: Run tests
        run: pytest

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Déploiement seulement après `test`

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Check if PR is from Développement to master
        id: check_pr
        run: |
          if [[ "${GITHUB_HEAD_REF}" == "Developpement" && "${GITHUB_BASE_REF}" == "master" ]]; then
            echo "Valid PR from Développement to master"
          else
            echo "Invalid PR source and target branches"
            exit 1  # Cela arrête le job si ce n'est pas une PR de Développement vers master
          fi

      - name: Add automerge label
        uses: actions/github-script@v6  # Utilisation d'un script GitHub pour ajouter un label
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            if (!pr.data.labels.some(label => label.name === 'automerge')) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['automerge'],
              });
            }

      - name: Auto-merge Pull Request
        uses: pascalgn/automerge-action@v0.16.4  # Version stable 0.16.4 de pascalgn/automerge-action
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}


