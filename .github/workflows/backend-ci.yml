name: Backend CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  migrate:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=Ecopétition.settings" >> $GITHUB_ENV

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create database
        run: |
          PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h localhost -U ${{ secrets.DB_USER }} -d postgres -c "CREATE DATABASE ${{ secrets.DB_NAME }};"

      - name: Run migrations
        run: python manage.py migrate

  test:
    runs-on: ubuntu-latest
    needs: migrate  # Exécute les tests seulement après `migrate`
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=Ecopétition.settings" >> $GITHUB_ENV

      - name: Run tests
        run: pytest

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Le déploiement se fait seulement après que `test` soit passé avec succès
    permissions:
      contents: write  # Donne l'accès pour manipuler les fichiers
      pull-requests: write  # Donne l'accès aux PRs pour pouvoir les fusionner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Permet d'avoir tout l'historique pour effectuer un merge

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Auto-merge Pull Request
        uses: pascalgn/automerge-action@v0.16.4
        with:
          merge-method: merge  # Fusion normale, pas squash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

